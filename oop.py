"""Appunti Object Oriented Programming.Prova su OOP presa da argomenti fatti a lezione."""import mathclass Television:    """Class describing a televsion."""    def __init__(self, owner):        """        Set variables for each object of the class.        It is called every time we create an object of this class        We can pass arguments to the constructor, just like any function.        """        print("Creating a television instance...")        self.model = "Sv32X553T"  # This is a class attribute in --init--        self.owner = owner  # This is set to the value of the argument    def print_info(self):        """Print the model and owner."""        message = "This is television model {}, owned by {}"        print(message.format(self.model, self.owner))    NUMBER_OF_CHANNELS = 999  # This is a class attributemy_television = Television('Irene')my_television.print_info()# =============================================================================# CLASS ATTRIBUTES E INSTANCE ATTRIBUTES# =============================================================================# la class ha 2 class attributes: NUMBER_OF_CHANNELS e modelprint(my_television.model)print(Television.NUMBER_OF_CHANNELS)  # class attributes sono  della classe# class attribyres si possono modificare, o per classe o per singolo oggettoTelevision.NUMBER_OF_CHANNELS = 998my_television.NUMBER_OF_CHANNELS = 1000my_television.model = 'cdshbjn'print(Television.NUMBER_OF_CHANNELS)  # class attributes sono  della classe# =============================================================================# PROPERTIES ED ENCAPSULATION# =============================================================================class Vector2d:    """    Class describing a 2d vector.    In input it takes module and angle    """    def __init__(self, module, angle):        self.module = float(module)        self.angle = float(angle)    @property    def x(self):        """Define x coordinate."""        return self.module * math.cos(self.angle)    @property    def y(self):        """Define y coordinate."""        return self.module * math.sin(self.angle)    @x.setter    def x(self, x):  # this function must be called as the property        """Update module and angle."""        self.module, self.angle = math.sqrt(x**2 + self.y**2),\            math.atan2(self.y, x)v = Vector2d(3.1622776601683795, -0.3217505543966422)print(v.x)v.x = 1.print(v.x, v.module, v.angle)